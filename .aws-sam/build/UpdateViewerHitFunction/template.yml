# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  sam-app

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-all-items.js
  GetViewerHitFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-viewer-hits.getViewerHitsHandler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      Description: Get viewer hits from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SiteVisits
        - DynamoDBCrudPolicy:
            TableName: !Ref SiteVisits
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          COUNT_TABLE: !Ref SiteVisits
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-by-id.js
  # getByIdFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: src/handlers/get-by-id.getByIdHandler
  #     Runtime: nodejs14.x
  #     MemorySize: 128
  #     Timeout: 100
  #     Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
  #     Policies:
  #       # Give Create/Read/Update/Delete Permissions to the SiteVisits
  #       - DynamoDBCrudPolicy:
  #           TableName: !Ref SiteVisits
  #     Environment:
  #       Variables:
  #         # Make table name accessible as environment variable from function code during execution
  #         Count_TABLE: !Ref SiteVisits
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           Path: /{id}
  #           Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-item.js
  UpdateViewerHitFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/update-viewer-hit.updateViewerHitsHandler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      Description: update viewr hits in DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SiteVisits
        - DynamoDBCrudPolicy:
            TableName: !Ref SiteVisits
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          COUNT_TABLE: !Ref SiteVisits
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST
  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  SiteVisits:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: siteUrl
        Type: String
      # AttributeDefinitions:
      #   - AttributeName: siteUrl
      #     AttributeType: S
      # KeySchema: 
      #   - AttributeName: siteUrl
      #     KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
